name: Build, Test, and Publish WebdriverIO Native Demo Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release type - major, minor or patch'
        required: true
        default: 'patch'

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true        

jobs:
  prepare_release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_new_version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Git
        run: |
          git config --global user.email "bot@webdriver.io"
          git config --global user.name "WebdriverIO Release Bot"        

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install Dependencies
        run: npm ci

      - name: Increment Version and Build Number
        id: set_new_version
        run: |
          NEW_VERSION=$(npm version ${{ github.event.inputs.releaseType }} --no-git-tag-version)
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Create Pre-Release Branch
        run: |
          git checkout -b pre-release
          git add .
          git commit -m "chore: Preparing for release $NEW_VERSION"
          git push origin pre-release

  android_build_and_test:
    needs: prepare_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Pre-Release Branch
        uses: actions/checkout@v3
        with:
          ref: pre-release

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install Dependencies
        run: npm ci

      - name: Setup Android SDK
        run: |
          sudo apt-get update -y
          sudo apt-get install -y openjdk-11-jdk wget unzip
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $HOME/android-sdk
          mv $HOME/android-sdk/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "platforms;android-33" "build-tools;33.0.2"

      - name: Install Allure CLI
        run: |
          sudo apt-get update -y
          sudo apt-get install -y allure

      - name: Run Tests
        run: npm run test

      - name: Generate Allure Report
        run: allure generate allure-results --clean -o allure-report

      - name: Upload Allure Report to Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report

  finalize:
    needs: [prepare_release, android_build_and_test]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout Pre-Release Branch
        uses: actions/checkout@v3
        with:
          ref: pre-release
          fetch-depth: 0 

      - name: Setup Git
        run: |
          git config --global user.email "bot@webdriver.io"
          git config --global user.name "WebdriverIO Release Bot"  

      - name: Tag New Release
        run: |
          git tag -a "${{ needs.prepare_release.outputs.new_version }}" -m "Release ${{ needs.prepare_release.outputs.new_version }}"
          git push origin "${{ needs.prepare_release.outputs.new_version }}"

      - name: Merge Pre-Release to Main
        run: |
          git fetch
          git checkout main
          git merge --no-ff pre-release -m "Merging pre-release to main: Release ${{ needs.prepare_release.outputs.new_version }}" || echo "Merge failed, printing diffs next."
          git push origin main
        continue-on-error: true

      - name: Print Diffs if Merge Fails
        if: failure()
        run: |
          echo "Printing diffs between main and pre-release..."
          git diff main pre-release
          echo "DIFFS_PRINTED=true" >> $GITHUB_ENV

      - name: Delete Pre-Release Branch
        run: |
          git push origin --delete pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    needs: [prepare_release, android_build_and_test, finalize]
    steps:
      - name: Delete Pre-Release Branch
        run: |
          git push origin --delete pre-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
